##
## Docs
##
#
# - IMPORTANT NOTICES
#   - DO NOT: push any untrusted code
#     - Code (including shell code in configure and Makefiles) are run on
#       at least some "runners" as a normal user without the benefit of
#       containerization such as Docker.
#     - On Theta, CI jobs can run batch jobs charged against our allocation.
#   - DO: push only to your "user/" namespace.
#     - Assuming use of a remote named 'alcf' and a Bitbucket user AnnExample:
#       `git push alcf HEAD:annexample/check/issue-9876`
#
# - Automated triggers based on branch names as follows:
#   - Branch name == 'develop'
#     - Runs CI at level of "dev-check" on every push
#   - Branch name contains the string '/dev-check/'
#     - Runs CI at level of "dev-check" on every push
#   - Branch name contains the string '/check/'
#     - Runs CI at level of "check" on every push
#   - All others
#     - No CI is triggered, but manual triggers are still possible (see below)
#
# - Results reporting to Bitbucket
#   - Build results for 'develop' are automatically reported to
#     `https://bitbucket.org/berkeleylab/upcxx`
#   - Reports use a key of "$CI_JOB_NAME.(dev-)check".  For instance the keys
#     'dirac.gcc.check' and 'dirac.gcc.dev-check'.
#   - Since keys omit any time or sequence info, a rerun can/will overwrite a
#     previous failure.  This is useful to deal with (fairly rare) timeouts or
#     other external factors which may cause a build to fail.
#     - The GitLab UI has a "Retry" button of one form or another on several of
#       the pages which display job status.  On dashboard-type views it is the
#       icon consisting of two arrows forming a circle.
#   - For (branch =~ '^[user]/*'), for [user] any sequence of non-/ characters,
#     then build results are reported to `https://bitbucket.org/[user]/[repo]`
#     - The value of [repo] defaults to `upcxx` with per-user exceptions
#       handled by logic in this file.
#     - Contact Paul for info on setting up your repo to allow these build
#       results to be posted.
#
# - One can trigger runs manually in a simple (stupid) UI accessible at
#   `https://ecpci-test.alcf.anl.gov/anl/upcpp/pipelines/new`
#   - Choose a branch from the pull down
#   - Set any variables desired (described below)
#   - Click "Run Pipeline"
#
# - In addition to use of the UI, one can use query URLs via a browser
#   - https://ecpci-test.alcf.anl.gov/anl/upcpp/pipelines/new?ref=develop&var[CI_HOST]=dirac
#     will (re)test `develop` with variable `CI_HOST` set to `dirac`
#     (variables are described below).
#   - One may separate multiple variable settings with `&`
#   - CLI web clients don't work because MFA is required for authentication
#   - Storing such links in a wiki, markdown or GDoc works fine
#
# - CI variables
#   - The default is to run all jobs (job = host.compiler) for any commit
#   - The following "selection" variables (listed with their supported values)
#     can be set in order to limit runs to the subset mating the constraints:
#     - CI_COMPILER: gnu, llvm, pgi, intel, cray, xcode
#     - CI_AGE:      new, old
#     - CI_CPU:      x86_64, knl, ppc64le, aarch64
#     - CI_OS:       linux, cnl, macos
#     - CI_HOST:     theta, theta-fe, dirac
#     - CI_NAME:     name of a specific job, such as "theta.PrgEnv-llvm_floor"
#   - The following control what is tested or how, with example legal values
#     - CI_DEV_CHECK       Must be 0 or 1 (or blank/unset for the default)
#     - CI_RUN_TESTS       Must be 0 or 1 (or blank/unset for the default)
#     - CI_NETWORKS        smp udp
#     - CI_RANKS           4
#     - CI_MAKE            /usr/local/bin/make
#     - CI_MAKE_PARALLEL   -j6
#     - CI_CONFIGURE_ARGS  [UNIMPLMENTED]
#     - CI_EXTRAFLAGS      Sets make variable EXTRAFLAGS when building tests
#                          Default is "-Werror"
#     - CI_TESTS           Sets make variable CI_TESTS when building tests
#                          Default is unset
#     - CI_NO_TESTS        Sets make variable CI_NO_TESTS when building tests
#                          Default is unset
#   - The following per-host/per-job variables provide additional fine-grained
#     control:
#     - CI_THETA_RUN_ALL_PRGENV
#       - Defaults to empty.  Only theta.PrgEnv-llvm{,_floor} run their tests.
#       - Set to '1' to enable *all* theta.PrgEnv-* jobs to submit the tests
#         to be run on the compute nodes.
#   - Any variable set when requesting the run is propagated to the environment.
#     - In the `CI_DEV_CHECK=1` case, this means `TEST_*` environment
#       variables are available to exclude tests and to add any extra flags
#       if/when necessary.  However, this is somewhat fragile, since these are
#       not additive with respect to values set here.
#
# - TODO:
#   - Wrap pipeline.sh in .generic:script
#     - Simplifies the script and maintenance
#     - Provides implementation CI_CONFIGURE_ARGS
#   - Implement CI_CONFIGURE_ARGS in .dev_ci:script
#     - Probably should use improvements to utils/dev-ci


#
# Global configuration / settings
#
stages:
  - build
variables:
  ANL_THETA_PROJECT_SERVICE_USER: "upcpp"
  ANL_THETA_SCHEDULER_PARAMETERS: "-n 1 -A CSC250STPM17 -t 0:30:00 "
  CI_COMPILER: ""          # gnu, llvm, pgi, intel, cray, xcode
  CI_AGE: ""               # new, old
  CI_CPU: ""               # x86_64, knl, ppc64le
  CI_OS: ""                # linux, cnl, macos
  CI_HOST: ""              # theta, theta-fe, dirac
  CI_NAME: ""              # name of a specific job, such as "dirac.pgi"
  CI_NETWORKS: "smp udp"
  CI_RANKS: 4
  CI_MAKE: make
  CI_MAKE_PARALLEL: ""
  CI_DEV_CHECK: ""
  CI_EXTRAFLAGS: "-Werror"

#
# Dummy job for defining YAML anchors to be used elsewhere
#
.defs:
  rules:
    # EXCLUDES based on CI_[FOO] set but not matching MY_[FOO]
    # TODO: merge to one complex expression?
    - &when_cc
      { if: '$CI_COMPILER != "" && $CI_COMPILER != $MY_COMPILER', when: never }
    - &when_age
      { if: '$CI_AGE      != "" && $CI_AGE      != $MY_AGE', when: never }
    - &when_os
      { if: '$CI_OS       != "" && $CI_OS       != $MY_OS', when: never }
    - &when_cpu
      { if: '$CI_CPU      != "" && $CI_CPU      != $MY_CPU', when: never }
    - &when_host
      { if: '$CI_HOST     != "" && $CI_HOST     != $MY_HOST', when: never }
    - &when_name
      { if: '$CI_NAME     != "" && $CI_NAME     != $CI_JOB_NAME', when: never }
    - &when_web
      { if: '$CI_PIPELINE_SOURCE == "web"', when: always }
    - &when_push1
      if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME =~ /\/(dev-)?check\//'
      when: always
    - &when_push2
      if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "develop"'
      when: always
  variables: &old_gnu   { MY_COMPILER: 'gnu',   MY_AGE: 'old', UPCXX_HAVE_OPENMP: 1 }
  variables: &new_gnu   { MY_COMPILER: 'gnu',   MY_AGE: 'new', UPCXX_HAVE_OPENMP: 1 }
  variables: &old_llvm  { MY_COMPILER: 'llvm',  MY_AGE: 'old', UPCXX_HAVE_OPENMP: 1 }
  variables: &new_llvm  { MY_COMPILER: 'llvm',  MY_AGE: 'new', UPCXX_HAVE_OPENMP: 1 }
  variables: &old_intel { MY_COMPILER: 'intel', MY_AGE: 'old', UPCXX_HAVE_OPENMP: 1 }
  variables: &new_intel { MY_COMPILER: 'intel', MY_AGE: 'new', UPCXX_HAVE_OPENMP: 1 }
  variables: &old_pgi   { MY_COMPILER: 'pgi',   MY_AGE: 'old', UPCXX_HAVE_OPENMP: 1 }
  variables: &new_pgi   { MY_COMPILER: 'pgi',   MY_AGE: 'new', UPCXX_HAVE_OPENMP: 1 }
  variables: &old_cray  { MY_COMPILER: 'cray',  MY_AGE: 'old', UPCXX_HAVE_OPENMP: 1 }
  variables: &new_cray  { MY_COMPILER: 'cray',  MY_AGE: 'new', UPCXX_HAVE_OPENMP: 1 }
  variables: &old_xcode { MY_COMPILER: 'xcode', MY_AGE: 'old', UPCXX_HAVE_OPENMP: '' }
  variables: &new_xcode { MY_COMPILER: 'xcode', MY_AGE: 'new', UPCXX_HAVE_OPENMP: '' }
  script:
    - &do_ci_dev_check |-
      # Establish default value of $CI_DEV_CHECK
      if [[ -z "$CI_DEV_CHECK" ]]; then
        if [[ $CI_COMMIT_REF_NAME == "develop" || $CI_COMMIT_REF_NAME =~ /dev-check/ ]]; then
          export CI_DEV_CHECK=1
        else
          export CI_DEV_CHECK=0
        fi
      fi
    - &start_logging
      exec &> >(tee -a output.txt)
    - &do_ci_vars |-
      # Reporting and re-exporting of $CI_* variables
      # Should follow do_ci_dev_check
      CI_RUN_TESTS="${CI_RUN_TESTS:-1}"
      echo "==== CI SYSTEM VARS ===="
      for var in CI_JOB_URL CI_JOB_NAME CI_COMMIT_REF_NAME CI_COMMIT_SHA CI_PIPELINE_SOURCE; do
        printf "%20s = '%s'\n" $var "${!var}"
      done
      echo "==== CI SELECTION VARS ===="
      for var in CI_COMPILER CI_AGE CI_CPU CI_OS CI_HOST CI_NAME; do
        printf "%20s = '%s'\n" $var "${!var}"
      done
      echo "==== CI CONTROL VARS ===="
      for var in CI_NETWORKS CI_RANKS CI_MAKE CI_MAKE_PARALLEL CI_DEV_CHECK CI_EXTRAFLAGS \
                 CI_RUN_TESTS CI_TESTS CI_NO_TESTS; do
        printf "%20s = '%s'\n" $var "${!var}"
      done
      echo "===="
      export CONFIGURE_ARGS+=" --with-default-network=${CI_NETWORKS%% *}"
      export RANKS="$CI_RANKS"
      export TEST_CERR_LIMIT=${TEST_CERR_LIMIT:-50}
      if [[ $GASNET_SPAWNFN == 'L' ]]; then
        # TEMPORARY workaround for bug 4079
        export TIMEOUT=${TIMEOUT:-$(type -p timeout)}
      fi
      unset BITBUCKET_USER BITBUCKET_APP_PASSWORD
      env > environment
      DO_MAKE="$CI_MAKE $CI_MAKE_PARALLEL"  # NEVER export 'MAKE'
    - &post_build_status |-
      # Report build status of $STATE to Bitbucket if configured.
      # Must follow use of &do_ci_dev_check ($CI_DEV_CHECK used in build "key")
      # Must precede use, if any, of &do_ci_vars (which clears the credentials)
      if [[ -n "$BITBUCKET_APP_PASSWORD" ]]; then
        prevstate="$(set +o)"; set +x
        if [[ -z $BITBUCKET_REPO ]] ; then
          if [[ $CI_COMMIT_REF_NAME =~ ^([^/]*)/ ]]; then
            user="${BASH_REMATCH[1]}"
            BITBUCKET_REPO="${user}/"
            case $user in
              jdbachan) BITBUCKET_REPO+="upcxx-jdbachan";;
              *) BITBUCKET_REPO+=upcxx;;
            esac
          else
             BITBUCKET_REPO=berkeleylab/upcxx
          fi
        fi
        URL="https://api.bitbucket.org/2.0/repositories/${BITBUCKET_REPO}/commit/${CI_COMMIT_SHA}/statuses/build"
        KEY="$CI_JOB_NAME.$((( $CI_DEV_CHECK )) && echo dev- || true)check"
        HREF="$CI_JOB_URL"
        if [[ -e output.txt ]]; then
          TITLE="GitLab CI of ${CI_COMMIT_REF_NAME} at ${CI_COMMIT_SHORT_SHA} on $KEY"
          if [[ $STATE == 'FAILED' ]]; then
            TITLE+=' (FAILED)'
          fi
          curl -sS -u "$BITBUCKET_USER:$BITBUCKET_APP_PASSWORD" \
               https://api.bitbucket.org/2.0/snippets  \
               -F title="GitLab CI of ${CI_COMMIT_REF_NAME} at ${CI_COMMIT_SHORT_SHA} on $KEY" \
               -F file=@output.txt >snippet.json || true
          id="$(grep -o '"id":"[^"]*"' snippet.json | cut '-d"' -f4)"
          if [[ -n "$id" ]]; then
            HREF="https://bitbucket.org/${BITBUCKET_USER}/workspace/snippets/${id}"
          fi
        fi
        DATA="{ \"state\": \"$STATE\", \"key\": \"$KEY\", \"url\": \"$HREF\" }"
        echo "DATA: $DATA"
        echo "URL:  $URL"
        curl -sS -u "$BITBUCKET_USER:$BITBUCKET_APP_PASSWORD" "$URL" \
           -X POST -H "Content-Type: application/json" -d "$DATA" 2>&1
        echo
        unset BITBUCKET_USER BITBUCKET_APP_PASSWORD
        eval "$prevstate"
      fi

#
# Compiler templates (use with extends)
#
.old_gnu:   { variables: *old_gnu }
.new_gnu:   { variables: *new_gnu }
.old_llvm:  { variables: *old_llvm }
.new_llvm:  { variables: *new_llvm }
.old_intel: { variables: *old_intel }
.new_intel: { variables: *new_intel }
.old_pgi:   { variables: *old_pgi }
.new_pgi:   { variables: *new_pgi }
.old_cray:  { variables: *old_cray }
.new_cray:  { variables: *new_cray }
.old_xcode: { variables: *old_xcode }
.new_xcode: { variables: *new_xcode }

#
# Rules templates (use with extends)
#
.rules_auto:
  rules:
    - *when_cc
    - *when_age
    - *when_os
    - *when_cpu
    - *when_host
    - *when_name
    - *when_web
    - *when_push1
    - *when_push2
.rules_manual:
  rules:
    - { if: '$CI_HOST == $MY_HOST', when: always }
    - { if: '$CI_NAME == $CI_JOB_NAME', when: always }
    - when: never

#
# Job templates (use with extends)
#

# Generic job (single-stage pipeline)
.generic:
  extends: [ .rules_auto ]
  stage: build
  artifacts:
    name: "gitlab-ci.$CI_COMMIT_SHORT_SHA.$CI_PIPELINE_ID.$CI_JOB_NAME"
    paths:
      - Makefile
      - config.log
      - environment
      - bld/gasnet.*/config.*
      - test-results
#   reports: { junit: test_results }
    expire_in: 1 week
    when: always
  script:
    - *do_ci_dev_check
    - STATE=INPROGRESS
    - *post_build_status
    - *start_logging
    - *do_ci_vars
    - |-
      # TODO: the following vars are an opportunity for more customization
      DO_BUILD="time $DO_MAKE"
      DO_INSTALL="time $DO_MAKE"
      DO_TEST_INSTALL="time $DO_MAKE"
      DO_COMPILE="time $DO_MAKE EXTRAFLAGS='$CI_EXTRAFLAGS' ${CI_TESTS:+TESTS='$CI_TESTS'} ${CI_NO_TESTS:+NO_TESTS='$CI_NO_TESTS'}"
      if (( $CI_RUN_TESTS )); then
        DO_RUN="time $DO_MAKE"
      else
        DO_RUN=':'
      fi
      set -e -x
      ./configure --prefix=inst $CONFIGURE_ARGS
      eval $DO_BUILD all
      eval $DO_INSTALL install
      eval $DO_TEST_INSTALL test_install || touch .pipe-failed
      # Test compile and run steps are sub-divided to reduce peak storage requirement:
      if (( $CI_DEV_CHECK )); then
        maybe_dev='dev-'
        modes="-opt -debug"
      else
        maybe_dev=''
        modes="''" # non-empty when seen by `for` but empty when subject to `eval`
      fi
      for net in $CI_NETWORKS; do
        export NETWORKS=$net
        for mode in $modes; do
          eval $DO_COMPILE ${maybe_dev}tests${mode} || touch .pipe-failed
          eval $DO_RUN     ${maybe_dev}run-tests    || touch .pipe-failed
          (set +x; rm -rf test-*-*)
        done
      done
      test ! -f .pipe-failed
      touch .pipe-passed
  after_script:
    - rm -rf test-*-*
    - *do_ci_dev_check
    - test -f .pipe-passed && STATE=SUCCESSFUL || STATE=FAILED
    - *post_build_status

# Variant using utils/dev-ci scripts
.dev_ci:
  extends: [ .generic ]
  script:
    - *do_ci_dev_check
    - STATE=INPROGRESS
    - *post_build_status
    - *start_logging
    - *do_ci_vars
    - |-
      if (( $CI_RUN_TESTS )); then
        DEV_CI_STAGES="${DEV_CI_STAGES:-configure,build,tests,run}"
      else
        DEV_CI_STAGES="${DEV_CI_STAGES:-configure,build,tests}"
      fi
      ./utils/dev-ci/$ci_script --stages="$DEV_CI_STAGES" --dir=. && touch .pipe-passed

################################################################################
##
## Theta compute nodes
##
## Host-specific note:
##  Unless CI_THETA_RUN_ALL_PRGENV=1, only PrgEnv-llvm{,_floor} will run the tests.
##

.theta.compute:
  tags: [ shell, anl, ecp-theta ]
  variables:
    ci_script: theta-llvm
    CI_MAKE_PARALLEL: "-j8"
    CI_NETWORKS: "aries"
    MY_OS:   'cnl'
    MY_CPU:  'knl'
    MY_HOST: 'theta'
  before_script:
    - *do_ci_dev_check
    - |-
      if ! (( $CI_THETA_RUN_ALL_PRGENV )); then
        DEV_CI_STAGES="${DEV_CI_STAGES:-configure,build,tests}"
      fi

# Theta PrgEnv-llvm
theta.PrgEnv-llvm:
  extends: [ .dev_ci, .new_llvm, .theta.compute ]
  variables:
    CI_THETA_RUN_ALL_PRGENV: 1
    UPCXX_HAVE_OPENMP: ''

# Theta PrgEnv-llvm_floor
theta.PrgEnv-llvm_floor:
  extends: [ .dev_ci, .old_llvm, .theta.compute ]
  variables:
    DEV_CI_PRGENV: llvm/4.0
    CI_THETA_RUN_ALL_PRGENV: 1
    UPCXX_HAVE_OPENMP: ''

# Theta PrgEnv-gnu
theta.PrgEnv-gnu:
  extends: [ .dev_ci, .new_gnu, .theta.compute ]
  variables:
    DEV_CI_PRGENV: gnu

# Theta PrgEnv-intel
theta.PrgEnv-intel:
  extends: [ .dev_ci, .new_intel, .theta.compute ]
  variables:
    DEV_CI_PRGENV: intel

# Theta PrgEnv-cray
theta.PrgEnv-cray:
  extends: [ .dev_ci, .new_cray, .theta.compute, .rules_manual ]
  variables:
    DEV_CI_PRGENV: cray

################################################################################
##
## Theta login node
##
## Host-specific note:
##  So, these jobs do NOT run except by request (match to CI_{HOST,NAME}).
##  The Dirac jobs cover both older and newer compiler versions
##
.theta.login:
  tags: [ shell, anl, ecp-theta ]
  extends: [ .rules_manual ]
  variables:
    CI_MAKE_PARALLEL: "-j8"
    CONFIGURE_ARGS: --without-cross --without-mpicc
    GASNET_SPAWNFN: L
    MY_OS:   'linux'
    MY_CPU:  'x86_64'
    MY_HOST: 'theta-fe'

# Theta login node GNU
theta.gnu:
  extends: [ .generic, .new_gnu, .theta.login ]
  before_script:
    - module load gcc
    - export CC=gcc CXX=g++

# Theta login node Intel
theta.intel:
  extends: [ .generic, .new_intel, .theta.login ]
  before_script:
    - module load intel
    - export CC=icc CXX=icpc

# Theta login node LLVM
theta.llvm:
  extends: [ .generic, .new_llvm, .theta.login ]
  variables:
    UPCXX_HAVE_OPENMP: ''
  before_script:
    - module swap PrgEnv-intel PrgEnv-llvm
    - module load gcc
    - module unload xalt
    - export CXX='clang++ --gcc-toolchain=/opt/gcc/8.3.0/snos'
    - export CC='clang --gcc-toolchain=/opt/gcc/8.3.0/snos'


################################################################################
##
## Dirac-like runner
##

.dirac:
  tags: [ shell, lbnl, class, dirac ]
  variables:
    CI_MAKE_PARALLEL: "-j4"
    MY_OS:   'linux'
    MY_CPU:  'x86_64'
    MY_HOST: 'dirac'
    GASNET_SPAWNFN: L
    GASNET_SUPERNODE_MAXSIZE: 2

dirac.pgi:
  extends: [ .generic, .new_pgi, .dirac ]
  resource_group: pgi_license
  before_script:
    - module load PrgEnv/pgi
    - export CC=pgcc CXX=pgc++

dirac.intel:
  extends: [ .generic, .new_intel, .dirac ]
  resource_group: intel_license
  before_script:
    - module load PrgEnv/intel
    - export CC=icc CXX=icpc

dirac.gcc:
  extends: [ .generic, .new_gnu, .dirac ]
  before_script:
    - module load PrgEnv/gnu
    - export CC=gcc CXX=g++

dirac.clang:
  extends: [ .generic, .new_llvm, .dirac ]
  before_script:
    - module load PrgEnv/llvm
    - export CC=clang CXX=clang++

dirac.pgi_floor:
  extends: [ .generic, .old_pgi, .dirac ]
  resource_group: pgi_license
  before_script:
    - module load PrgEnv/pgi/19.1
    - export CC=pgcc CXX=pgc++
    - export PGI_DEBUG_SYMBOLS_BROKEN=1

dirac.intel_floor:
  extends: [ .generic, .old_intel, .dirac ]
  resource_group: intel_license
  before_script:
    - module load PrgEnv/intel/2017.2.174
    - export CC=icc CXX=icpc

dirac.gcc_floor:
  extends: [ .generic, .old_gnu, .dirac ]
  before_script:
    - module load PrgEnv/gnu/6.4.0
    - export CC=gcc CXX=g++

dirac.clang_floor:
  extends: [ .generic, .old_llvm, .dirac ]
  before_script:
    - module load PrgEnv/llvm/4.0.0-gcc640
    - export CC=clang CXX=clang++

################################################################################
##
## macOS 10.15 (Catalina) runner w/ Xcode 11.x
##

.catalina:
  tags: [ shell, lbnl, class, xcode-latest ]
  variables:
    CI_MAKE_PARALLEL: "-j4"
    MY_OS:   'macos'
    MY_CPU:  'x86_64'
    MY_HOST: 'catalina'
    GASNET_SPAWNFN: L
    GASNET_SUPERNODE_MAXSIZE: 2
    UPCXX_RUN_TIME_LIMIT: 360

catalina.xcode:
  extends: [ .dev_ci, .new_xcode, .catalina ]
  variables:
    ci_script: catalina-xcode

catalina.gcc:
  extends: [ .generic, .new_gnu, .catalina ]
  variables:
    CC:  gcc-10
    CXX: g++-10

################################################################################
##
## macOS 10.11 (El-Capitan) runner w/ Xcode 8.x
##

.el-capitan:
  tags: [ shell, lbnl, class, xcode-floor ]
  variables:
    CI_MAKE_PARALLEL: "-j4"
    MY_OS:   'macos'
    MY_CPU:  'x86_64'
    MY_HOST: 'el-capitan'
    GASNET_SPAWNFN: L
    GASNET_SUPERNODE_MAXSIZE: 2
    UPCXX_RUN_TIME_LIMIT: 360

el-capitan.xcode_floor:
  extends: [ .dev_ci, .new_xcode, .el-capitan ]
  variables:
    ci_script: el-capitan-xcode_old

# Is actually gcc 6.5.0 where 6.4.0 is our documented floor
el-capitan.gcc_floor:
  extends: [ .generic, .old_gnu, .el-capitan ]
  variables:
    CC:  gcc-6
    CXX: g++-6

################################################################################
##
## Power9 VM runner
##

.power9:
  tags: [ shell, lbnl, class, power9 ]
  variables:
    CI_MAKE_PARALLEL: "-j4"
    MY_OS:   'linux'
    MY_CPU:  'ppc64le'
    MY_HOST: 'power9'
    GASNET_SPAWNFN: L
    GASNET_SUPERNODE_MAXSIZE: 2
    GASNET_CONFIGURE_ARGS: '--enable-force-posix-realtime'

power9.pgi:
  extends: [ .generic, .new_pgi, .power9 ]
  before_script:
    - module load pgi
    - export CC=pgcc CXX=pgc++

power9.gcc:
  extends: [ .generic, .new_gnu, .power9 ]
  before_script:
    - module load gcc
    - export CC=gcc CXX=g++

power9.clang:
  extends: [ .generic, .new_llvm, .power9 ]
  before_script:
    - module load clang
    - export CC=clang CXX=clang++

power9.gcc_floor:
  extends: [ .generic, .old_gnu, .power9 ]
  before_script:
    - module load gcc/6.4.0
    - export CC=gcc CXX=g++

power9.clang_floor:
  extends: [ .generic, .old_llvm, .power9 ]
  before_script:
    - module load clang/5.0.0-gcc640
    - export CC=clang CXX=clang++

################################################################################
##
## AARCH64 VM runner (wombat)
##
## Host-specific note:
##  There is no unattended gitlab-runner on this system.
##  So, these jobs do NOT run except by request (match to CI_{HOST,NAME}).

.wombat:
  tags: [ shell, lbnl, class, aarch64 ]
  extends: [ .rules_manual ]
  variables:
    CI_MAKE_PARALLEL: "-j16"
    CI_NETWORKS: 'ibv'
    MY_OS:   'linux'
    MY_CPU:  'aarch64'
    MY_HOST: 'wombat'

wombat.gcc:
  extends: [ .dev_ci, .new_gnu, .wombat ]
  variables:
    ci_script: wombat-gcc

wombat.clang:
  extends: [ .dev_ci, .new_llvm, .wombat ]
  variables:
    ci_script: wombat-clang

wombat.gcc_floor:
  extends: [ .dev_ci, .old_gnu, .wombat ]
  variables:
    ci_script: wombat-gcc_old

wombat.clang_floor:
  extends: [ .dev_ci, .old_llvm, .wombat ]
  variables:
    ci_script: wombat-clang_old

################################################################################
##
## Cori Haswell compute nodes
##
## Host-specific note:
##  There is no unattended gitlab-runner on this system.
##  So, these jobs do NOT run except by request (match to CI_{HOST,NAME}).

.cori_hsw.compute:
  tags: [ shell, nersc, cori_hsw, user_hargrove ]
  extends: [ .rules_manual ]
  variables:
    ci_script: cori-cray
    CI_MAKE_PARALLEL: "-j8"
    CI_NETWORKS: "aries"
    MY_OS:   'cnl'
    MY_CPU:  'x86_64'
    MY_HOST: 'cori_hsw'

# Cori PrgEnv-cray
cori_hsw.PrgEnv-cray:
  extends: [ .dev_ci, .new_cray, .cori_hsw.compute ]

# Cori PrgEnv-intel
cori_hsw.PrgEnv-intel:
  extends: [ .dev_ci, .new_intel, .cori_hsw.compute ]
  before_script:
    - export DEV_CI_PRGENV=intel
    - export DEV_CI_COMPILER=$(module -t avail intel |& sort -rV | grep -m1 ^intel) # newest

# Cori PrgEnv-gnu
cori_hsw.PrgEnv-gnu:
  extends: [ .dev_ci, .new_gnu, .cori_hsw.compute ]
  before_script:
    - export DEV_CI_PRGENV=gnu
    - export DEV_CI_COMPILER=$(module -t avail gcc |& sort -rV | grep -m1 ^gcc) # newest

# Cori PrgEnv-cray_floor
cori_hsw.PrgEnv-cray_floor:
  extends: [ .dev_ci, .old_cray, .cori_hsw.compute ]
  before_script:
    - export DEV_CI_COMPILER=cce/9.0.0
    # COMPILER_PATH is a hack to replace broken linker in out-of-date cce/9.0.0
    - export COMPILER_PATH=/opt/cray/pe/cce/default/binutils/x86_64/bin

# Cori PrgEnv-intel_floor
cori_hsw.PrgEnv-intel_floor:
  extends: [ .dev_ci, .old_intel, .cori_hsw.compute ]
  before_script:
    - export DEV_CI_PRGENV=intel
    - export DEV_CI_COMPILER=intel/18.0.1.163
    - module use /global/common/sw/pe/opt/modulefiles
    - module load gcc/7.1.0
    # GXX_INCLUDE is a hack to get archived Intel and GCC versions working together
    - export GXX_INCLUDE=$(dirname $(dirname $(which g++)))/snos/include/g++

# Cori PrgEnv-gnu_floor
cori_hsw.PrgEnv-gnu_floor:
  extends: [ .dev_ci, .old_gnu, .cori_hsw.compute ]
  before_script:
    - export DEV_CI_PRGENV=gnu
    - export DEV_CI_COMPILER=gcc/7.1.0
    - module use /global/common/sw/pe/opt/modulefiles
